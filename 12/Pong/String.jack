// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array x;
	field int mLength;
	field int Length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */


    constructor String new(int maxLength) {
	if(maxLength = 0){
		let x = Array.new(1);
		let Length = 0;
	}else{
		let Length  = 0;
		let mLength = maxLength; // Could I have two maxLength?
	
		let x = Array.new(maxLength);
	}
	return this;
	
    }

    /** Disposes this string. */
    method void dispose() {
	do Memory.deAlloc(this);
	return;
    }

    /** Returns the current length of this string. */
    method int length() {
	return Length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	return x[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	let x[j] = c;
	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
	var Array temp;
	var int counter;
	let temp = Array.new(Length+1);
	let counter = 0;
	if(Length = mLength){
		
	
	while(counter < Length){
			let temp[counter] = x[counter];
			let counter = counter+1;
		}
			let temp[counter] = c;

			let x = temp;
			do Memory.deAlloc(temp);
			let Length = Length + 1;
			let mLength = mLength + 1;
			return x;
	}
	let x[Length] = c;
	let Length = Length + 1;
	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	let Length = Length - 1;
	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	var int counter;
	var int val;
	var int n;
	let n = 1;
	let counter = 0;
	let val =0;


	while((counter) < Length){


		if((counter = 0) & (charAt(counter) = 45)){//charAt might have bene pseudo code
			
			let n = -1;
		}

		else{
			let val = (10*val)+(charAt(counter)-48);
			
		}

		let counter = counter+1;
		

	}
	return val*n;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	var int lastDigit;
	var int c;
	var int digit;
	let Length = 0;
	while(~(Math.abs(val)=0)){
		if(Math.abs(val) < 10){
			if (val < 0){
				let val = val * -1;
				do appendChar(val + 48);
				do appendChar(45);
			}
			else{
				do appendChar(val + 48);
			}
			let val =0;
			
		}
		else{
			let digit = val-((val/10)*10);
			let val = val/10;
			do appendChar(Math.abs(digit) + 48);
		}
	}
	let c = 0;
	
	while(c < (Length / 2)){
		let digit = x[c];
		let x[c] = x[Length - c - 1];
		let x[Length - c - 1] = digit;
		let c = c+1;

	}
	return;
	
    }

    /** Returns the new line character. */
    function char newLine() {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	return 34;
    }
}

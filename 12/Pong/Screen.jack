// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static array twoToThe;
    static boolean black;
    /** Initializes the Screen. */
    function void init() {
	let black = true;
	let twoToThe = Array.new(16);
	let twoToThe[0]=1;
	let twoToThe[1]=2;
	let twoToThe[2]=4;
	let twoToThe[3]=8;
	let twoToThe[4]=16;
	let twoToThe[5]=32;
	let twoToThe[6]=64;
	let twoToThe[7]=128;
	let twoToThe[8]=256;
	let twoToThe[9]=512;
	let twoToThe[10]=1024;
	let twoToThe[11]=2048;
	let twoToThe[12]=4096;
	let twoToThe[13]=8192;
	let twoToThe[14]=16384;
	let twoToThe[15]=32767 + 1;


	return;
    }
    function int bit(int value, int location){
	if(value < 0){
	if(Screen.bit((-value)-1,location) = 1){
			return 0;
		}
                else{
			return 1;
		}
	}
	
	

	if(~((value & twoToThe[location]) =0)){
		return 1;
	}
	else{
	return 0;
	}
	return -5;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
	var int z;
	let z = 16384;
	while(z < 24576){
		do Memory.poke(z, (0));//why is compiler not letting me do -32768
		let z = z+1;
	}
	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
	let black = b;

	return;

    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int val, rem, currColor, insert, counter, opt,z;
		let z = 32*y;
		let opt = x/16;
		let val = Memory.peek(16384 + (z) + (opt));
		let rem = (x-((opt)*16));
		let currColor = Screen.bit(val,rem);
		let insert = 1;
		let counter = 0;

		while(counter < rem){
			let insert = insert+insert;
			let counter = counter +1;
		}
		if(rem = 15){
			let insert = 32767 + 1;
		}
		

		if ((~black) & (currColor = 1)){
			do Memory.poke((16384 + (z) + (opt)),(Memory.peek(16384 + (z) + (opt))-insert));
		}
		if((black) & (currColor = 0)){

			do Memory.poke((16384 + (z) + (opt)),(Memory.peek(16384 + (z) + (opt))+insert));

		}
		return;

		
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int counter;	

		let counter =-r;

		
		while(counter <(r+1)){
	do Screen.drawLine(x - Math.sqrt((r*r)-(counter*counter)),y+counter,x + Math.sqrt((r*r)-(counter*counter)),y+counter );
			let counter=counter+1;
		}	

			
	return;

    }
    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
	var int a, b, diff, m,n,z,x,r;
	let a =0;
	let b = 0;
	let diff = 0; 
	let m = 1;
	let n = 1;
	if((y2-y1) = 0){
		if(x2-x1 < 16){
			while(a < (x2-x1+1) ){
				do Screen.drawPixel(x1+a,y1);
				let a = a+1;
		
			}
			return;
		}
		else{
			
			while( ~(( ( (a+x1)/16)*16) = (a+x1))){
				do Screen.drawPixel(x1+a,y1);
				let a = a+1;
			}
			let b =32*y1;
			while((a+x1 + 16) < x2){
				do Memory.poke(16384 + (b) + ((a+x1)/16),-1);
				let a =a+16;
			}
			while(a+x1 < (x2+1)){
				do Screen.drawPixel(x1+a,y1);
				let a = a+1;
			}
			return;

			

		}

	}
	if((y2 - y1) < 0){
		let m = -1;
	}
	if((x2 - x1) < 0){
		let n = -1;
	}
	let z = Math.abs(x2-x1)+1;
	let x = Math.abs(y2 - y1)+1;
	if(z = 1){
		//let z = 100;
	}
	if(x = 1){
		//let x = 100;
	}
	if((y2 - y1) = 0){

	while((a < z) &(b <x)){
		do Screen.drawPixel((x1+(a*n)), (y1+(b*m)));
		if(diff<1){
			
			let a = a+1;
			
			
			let diff = diff+Math.abs(y2 - y1);
		}
		else{
	
			let b = b+1;
			
			
			let diff = diff-Math.abs(x2-x1);
		}
	}
	}
	if((x2 - x1) = 0){

	while((a < z) &(b <x)){
		do Screen.drawPixel((x1+(a*n)), (y1+(b*m)));
		if(diff<0){
			
			let a = a+1;
			
			
			let diff = diff+Math.abs(y2 - y1);
		}
		else{
	
			let b = b+1;
			
			
			let diff = diff-Math.abs(x2-x1);
		}
	}

	}
	


	if(~(((y2 - y1) = 0)|((x2 - x1) = 0))){

	while((a < z) &(b <x)){
		do Screen.drawPixel((x1+(a*n)), (y1+(b*m)));
		if(diff<1){
			
			let a = a+1;
			
			
			let diff = diff+Math.abs(y2 - y1);
		}
		else{
	
			let b = b+1;
			
			
			let diff = diff-Math.abs(x2-x1);
		}
	}
	}

	
	
	return;
    }














    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	var int x, y,r1,r2, rightDiff, leftDiff,final1,final2,d,counter;
	var int z;
	let z =0;
	
	while(z < (1+y2-y1)){
		do Screen.drawLine(x1,y1+z,x2,y1+z);
		let z = z+1;
	}
	return;
	if(Math.abs((x2-x1))<16){
		let d = 0;
		while(d <  (Math.abs(y2-y1)+1)){
			do Screen.drawLine(x1,y1+d,x2,y1+d);
			let d = d+1;
		}
		return;
	}




	let final1 = 1;
	let final2 = 1;	




	let leftDiff = (((x1/16)+1)*16)-x1;

	let rightDiff  = x2 - ((x2/16)*16);
	
	if(leftDiff = 0){
		let final1 = 0;
	}
	if(rightDiff = 0){
		let final2 = 0;
	}

	while(z < leftDiff){
		let final1 = final1+final1;
		let z = z+1;
	}
	let final1 = final1+final1 - 1;
	
	while(z < 16){
	let final1 = final1+final1;
	let z=z+1;
	}

	let z=0;
	while(z < rightDiff){
		let final2 = final2+final2;
		let z = z+1;
	}

	let final2 = final2+final2 - 1;
	

	let x = x1;
	let y = y1;


	while(y<(y2+1)){
	let x = x1;
	

	

	while(x<(x2+1)){
			
			if( (((x/16)*16)=x) & ((x +16) < (x2+1)) ){
				if(black){
					do Memory.poke((16384 + (32*y) + (x/16)),-1);
				}
				else{
					do Memory.poke((16384 + (32*y) + (x/16)),0);
				}
				
				let x= x+16;
				
			}
			


			else{	
				if(black){
					if((x +16) < x2){
						if(Memory.peek((16384 + (32*y) + (x/16))) = 0){
							do Memory.poke((16384 + (32*y) + (x/16)),final1);
							let x=x+leftDiff;
						}
				
						else{
							do Screen.drawLine(x1-leftDiff,y,x1,y);
							let x=x+leftDiff;
						}
					}
					else{

						if(Memory.peek((16384 + (32*y) + (x/16))) = 0){
							do Memory.poke((16384 + (32*y) + (x/16)),final2);
						}
						else{
							do Screen.drawLine(x2-rightDiff,y,x2,y);
							let x=x+rightDiff;
						}
				
					}
				}			
				else{


					if((x +16) < x2){

						if(Memory.peek( (16384 + (32*y) + (x/16)) = -1 )){

							do Memory.poke( (16384 + (32*y) + (x/16)) ,-1-final1);
							let x=x+leftDiff;
						}
						else{
							do Screen.drawLine(x1-leftDiff,y,x1,y);
							let x=x+leftDiff;
						}
					}

					else{
						if(Memory.peek((16384 + (32*y) + (x/16))) = -1){
							do Memory.poke((16384 + (32*y) + (x/16)),-1-final2);
						}
						else{
							do Screen.drawLine(x2-rightDiff,y,x2,y);
							let x=x+rightDiff;
						}
					}
				
				

				
				}
			}
			
		}

		let y = y+1;


	}

		

	return;
    }


}

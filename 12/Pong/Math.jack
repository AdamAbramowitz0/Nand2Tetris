// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static array twoToThe;
    static int drop;
    /** Initializes the library. */
    function void init() {
	let twoToThe = Array.new(16);
	let twoToThe[0]=1;
	let twoToThe[1]=2;
	let twoToThe[2]=4;
	let twoToThe[3]=8;
	let twoToThe[4]=16;
	let twoToThe[5]=32;
	let twoToThe[6]=64;
	let twoToThe[7]=128;
	let twoToThe[8]=256;
	let twoToThe[9]=512;
	let twoToThe[10]=1024;
	let twoToThe[11]=2048;
	let twoToThe[12]=4096;
	let twoToThe[13]=8192;
	let twoToThe[14]=16384;
	let twoToThe[15]=32767+1;
	let drop = 0;
	return;
    }


function int bit(int value, int location){
	
	if(~((value & twoToThe[location]) =0)){
		return 1;
	}
	else{
	return 0;
	}
	return -5;
    }




    /** Returns the absolute value of x. */
    function int abs(int x) {
	if(x < 0){
		return -x;
	}
	else{
		return x;
	}
    }	
   




    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
	var int sum;
	var int counter;
	var int z;
	let z = x;
	let counter = 0;
	let sum = 0;
	
	while(counter < 16){

		if(Math.bit(y,counter) = 1){
			let sum = sum + z;	

		}


		let z = z + z;
		let counter = counter + 1;
	 }
	return sum;

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {

	var int q;
	var int z;
	let drop = 0;
	if(~(((x > -1) & (y > -1)) | ((x <0) & (y < 0)))){
		return -Math.divide(Math.abs(x),Math.abs(y));
	}	
	if((x <0) & (y < 0)){
		return Math.divide(Math.abs(x),Math.abs(y));
	}
	
	if(y > x){
		return 0;
	}
	
	let q = Math.divide(x,(y+y));
	if((x-(drop))<y){ //2qy
		
		return (q+q);
	}
	else{	
		let drop = drop+y;
		return ((q+q)+1);
		
	}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
	var int y;
	var int counter;
	var int mult;
	let y = 0;

	let counter = 7;

	while(counter > -1){
		if((y+ twoToThe[counter]) < 182){
		let mult = Math.multiply((y+ twoToThe[counter]),(y + twoToThe[counter]));
		
		if( (mult < (x)) |  (mult = (x))){
			
			if(mult > (-1)){
				
				let y = y+twoToThe[counter];
			}
		}
		}
		let counter = counter-1;
	}
	return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
	if(a>b){
		return a;
	}
	return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
	if(a > b){
		return b;
	}
	return a;
    }
}

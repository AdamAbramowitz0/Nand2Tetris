<class> 
<keyword> class </keyword> 
<identifier>Ball</identifier> 
<Eleven> Name: Ball Catagory: class Index: NONE Usage: Declared </Eleven> 
<symbol>{</symbol> 
<classVarDec> 
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>x</identifier>
<Eleven> Name: x Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>,</symbol>
<identifier>y</identifier>
<Eleven> Name: y Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>;</symbol>
</classVarDec>
<classVarDec> 
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>lengthx</identifier>
<Eleven> Name: lengthx Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>,</symbol>
<identifier>lengthy</identifier>
<Eleven> Name: lengthy Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>;</symbol>
</classVarDec>
<classVarDec> 
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>d</identifier>
<Eleven> Name: d Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>,</symbol>
<identifier>straightD</identifier>
<Eleven> Name: straightD Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>,</symbol>
<identifier>diagonalD</identifier>
<Eleven> Name: diagonalD Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>;</symbol>
</classVarDec>
<classVarDec> 
<keyword>field</keyword>
<keyword>boolean</keyword>
<identifier>invert</identifier>
<Eleven> Name: invert Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>,</symbol>
<identifier>positivex</identifier>
<Eleven> Name: positivex Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>,</symbol>
<identifier>positivey</identifier>
<Eleven> Name: positivey Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>;</symbol>
</classVarDec>
<classVarDec> 
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>leftWall</identifier>
<Eleven> Name: leftWall Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>,</symbol>
<identifier>rightWall</identifier>
<Eleven> Name: rightWall Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>,</symbol>
<identifier>topWall</identifier>
<Eleven> Name: topWall Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>,</symbol>
<identifier>bottomWall</identifier>
<Eleven> Name: bottomWall Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>;</symbol>
</classVarDec>
<classVarDec> 
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>wall</identifier>
<Eleven> Name: wall Catagory: field Index: NONE Usage: Declared </Eleven> 
<symbol>;</symbol>
</classVarDec>
<subroutineDec> 
<keyword>constructor</keyword>
<identifier>Ball</identifier>
<identifier>new</identifier>
<symbol>(</symbol>
<parameterList> 
<keyword>int</keyword>
<identifier>Ax</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>Ay</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>AleftWall</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>ArightWall</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>AtopWall</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>AbottomWall</identifier>
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>x</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>Ax</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>y</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>Ay</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>leftWall</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>AleftWall</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>rightWall</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>ArightWall</identifier> 
</term>
<symbol>-</symbol> 
<term> 
<integerConstant>6</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>topWall</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>AtopWall</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>bottomWall</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>AbottomWall</identifier> 
</term>
<symbol>-</symbol> 
<term> 
<integerConstant>6</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>wall</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<integerConstant>0</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<doStatement> 
 <keyword>do</keyword> 
<identifier>show</identifier> 
<symbol>(</symbol> 
<expressionList> 
</expressionList> 
<symbol>)</symbol> 
<symbol>;</symbol> 
</doStatement> 
<returnStatement> 
 <keyword>return</keyword> 
<expression> 
<term> 
<keyword>this</keyword> 
</term>
</expression> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>dispose</identifier>
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
<identifier>Memory</identifier> 
<symbol>.</symbol> 
<identifier>deAlloc</identifier> 
<symbol>(</symbol> 
<expressionList> 
<expression> 
<term> 
<keyword>this</keyword> 
</term>
</expression> 
</expressionList> 
<symbol>)</symbol> 
<symbol>;</symbol> 
 </doStatement> 
<returnStatement> 
 <keyword>return</keyword> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>show</identifier>
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
<identifier>Screen</identifier> 
<symbol>.</symbol> 
<identifier>setColor</identifier> 
<symbol>(</symbol> 
<expressionList> 
<expression> 
<term> 
<keyword>true</keyword> 
</term>
</expression> 
</expressionList> 
<symbol>)</symbol> 
<symbol>;</symbol> 
 </doStatement> 
<doStatement> 
 <keyword>do</keyword> 
<identifier>draw</identifier> 
<symbol>(</symbol> 
<expressionList> 
</expressionList> 
<symbol>)</symbol> 
<symbol>;</symbol> 
</doStatement> 
<returnStatement> 
 <keyword>return</keyword> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>hide</identifier>
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
<identifier>Screen</identifier> 
<symbol>.</symbol> 
<identifier>setColor</identifier> 
<symbol>(</symbol> 
<expressionList> 
<expression> 
<term> 
<keyword>false</keyword> 
</term>
</expression> 
</expressionList> 
<symbol>)</symbol> 
<symbol>;</symbol> 
 </doStatement> 
<doStatement> 
 <keyword>do</keyword> 
<identifier>draw</identifier> 
<symbol>(</symbol> 
<expressionList> 
</expressionList> 
<symbol>)</symbol> 
<symbol>;</symbol> 
</doStatement> 
<returnStatement> 
 <keyword>return</keyword> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>draw</identifier>
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
<identifier>Screen</identifier> 
<symbol>.</symbol> 
<identifier>drawRectangle</identifier> 
<symbol>(</symbol> 
<expressionList> 
<expression> 
<term> 
<identifier>x</identifier> 
</term>
</expression> 
<symbol>,</symbol> 
<expression> 
<term> 
<identifier>y</identifier> 
</term>
</expression> 
<symbol>,</symbol> 
<expression> 
<term> 
<identifier>x</identifier> 
</term>
<symbol>+</symbol> 
<term> 
<integerConstant>5</integerConstant> 
</term>
</expression> 
<symbol>,</symbol> 
<expression> 
<term> 
<identifier>y</identifier> 
</term>
<symbol>+</symbol> 
<term> 
<integerConstant>5</integerConstant> 
</term>
</expression> 
</expressionList> 
<symbol>)</symbol> 
<symbol>;</symbol> 
 </doStatement> 
<returnStatement> 
 <keyword>return</keyword> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>getLeft</identifier>
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<returnStatement> 
 <keyword>return</keyword> 
<expression> 
<term> 
<identifier>x</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>getRight</identifier>
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<returnStatement> 
 <keyword>return</keyword> 
<expression> 
<term> 
<identifier>x</identifier> 
</term>
<symbol>+</symbol> 
<term> 
<integerConstant>5</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>setDestination</identifier>
<symbol>(</symbol>
<parameterList> 
<keyword>int</keyword>
<identifier>destx</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>desty</identifier>
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<varDec> 
<keyword>var</keyword> 
<keyword>int</keyword> 
<identifier>dx</identifier> 
<symbol>,</symbol> 
<identifier>dy</identifier> 
<symbol>,</symbol> 
<identifier>temp</identifier> 
<symbol>;</symbol> 
</varDec> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>lengthx</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>destx</identifier> 
</term>
<symbol>-</symbol> 
<term> 
<identifier>x</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>lengthy</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>desty</identifier> 
</term>
<symbol>-</symbol> 
<term> 
<identifier>y</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>dx</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>Math</identifier> 
<symbol>.</symbol> 
<identifier>abs</identifier> 
<symbol>(</symbol> 
<expressionList> 
<expression> 
<term> 
<identifier>lengthx</identifier> 
</term>
</expression> 
</expressionList> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>dy</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>Math</identifier> 
<symbol>.</symbol> 
<identifier>abs</identifier> 
<symbol>(</symbol> 
<expressionList> 
<expression> 
<term> 
<identifier>lengthy</identifier> 
</term>
</expression> 
</expressionList> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>invert</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>dx</identifier> 
</term>
<symbol>&lt;</symbol> 
<term> 
<identifier>dy</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>invert</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>temp</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>dx</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>dx</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>dy</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>dy</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>temp</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>positivex</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>y</identifier> 
</term>
<symbol>&lt;</symbol> 
<term> 
<identifier>desty</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>positivey</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>x</identifier> 
</term>
<symbol>&lt;</symbol> 
<term> 
<identifier>destx</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
<keyword>else</keyword> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>positivex</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>x</identifier> 
</term>
<symbol>&lt;</symbol> 
<term> 
<identifier>destx</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>positivey</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>y</identifier> 
</term>
<symbol>&lt;</symbol> 
<term> 
<identifier>desty</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
 </ifStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>d</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<integerConstant>2</integerConstant> 
</term>
<symbol>*</symbol> 
<term> 
<identifier>dy</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
<symbol>-</symbol> 
<term> 
<identifier>dx</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>straightD</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<integerConstant>2</integerConstant> 
</term>
<symbol>*</symbol> 
<term> 
<identifier>dy</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>diagonalD</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<integerConstant>2</integerConstant> 
</term>
<symbol>*</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>dy</identifier> 
</term>
<symbol>-</symbol> 
<term> 
<identifier>dx</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<returnStatement> 
 <keyword>return</keyword> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>move</identifier>
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
<identifier>hide</identifier> 
<symbol>(</symbol> 
<expressionList> 
</expressionList> 
<symbol>)</symbol> 
<symbol>;</symbol> 
</doStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>d</identifier> 
</term>
<symbol>&lt;</symbol> 
<term> 
<integerConstant>0</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>d</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>d</identifier> 
</term>
<symbol>+</symbol> 
<term> 
<identifier>straightD</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
<keyword>else</keyword> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>d</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>d</identifier> 
</term>
<symbol>+</symbol> 
<term> 
<identifier>diagonalD</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>positivey</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>invert</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>x</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>x</identifier> 
</term>
<symbol>+</symbol> 
<term> 
<integerConstant>4</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
<keyword>else</keyword> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>y</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>y</identifier> 
</term>
<symbol>+</symbol> 
<term> 
<integerConstant>4</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
 </ifStatement> 
</statements>
<symbol>}</symbol> 
<keyword>else</keyword> 
<symbol>{</symbol> 
<statements>
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>invert</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>x</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>x</identifier> 
</term>
<symbol>-</symbol> 
<term> 
<integerConstant>4</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
<keyword>else</keyword> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>y</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>y</identifier> 
</term>
<symbol>-</symbol> 
<term> 
<integerConstant>4</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
 </ifStatement> 
</statements>
<symbol>}</symbol> 
 </ifStatement> 
</statements>
<symbol>}</symbol> 
 </ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>positivex</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>invert</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>y</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>y</identifier> 
</term>
<symbol>+</symbol> 
<term> 
<integerConstant>4</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
<keyword>else</keyword> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>x</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>x</identifier> 
</term>
<symbol>+</symbol> 
<term> 
<integerConstant>4</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
 </ifStatement> 
</statements>
<symbol>}</symbol> 
<keyword>else</keyword> 
<symbol>{</symbol> 
<statements>
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>invert</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>y</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>y</identifier> 
</term>
<symbol>-</symbol> 
<term> 
<integerConstant>4</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
<keyword>else</keyword> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>x</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>x</identifier> 
</term>
<symbol>-</symbol> 
<term> 
<integerConstant>4</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
 </ifStatement> 
</statements>
<symbol>}</symbol> 
 </ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>~</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>x</identifier> 
</term>
<symbol>&gt;</symbol> 
<term> 
<identifier>leftWall</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>wall</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<integerConstant>1</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>x</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>leftWall</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>~</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>x</identifier> 
</term>
<symbol>&lt;</symbol> 
<term> 
<identifier>rightWall</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>wall</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<integerConstant>2</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>x</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>rightWall</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>~</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>y</identifier> 
</term>
<symbol>&gt;</symbol> 
<term> 
<identifier>topWall</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>wall</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<integerConstant>3</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>y</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>topWall</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>~</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>y</identifier> 
</term>
<symbol>&lt;</symbol> 
<term> 
<identifier>bottomWall</identifier> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>wall</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<integerConstant>4</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>y</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>bottomWall</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
</ifStatement> 
<doStatement> 
 <keyword>do</keyword> 
<identifier>show</identifier> 
<symbol>(</symbol> 
<expressionList> 
</expressionList> 
<symbol>)</symbol> 
<symbol>;</symbol> 
</doStatement> 
<returnStatement> 
 <keyword>return</keyword> 
<expression> 
<term> 
<identifier>wall</identifier> 
</term>
</expression> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>bounce</identifier>
<symbol>(</symbol>
<parameterList> 
<keyword>int</keyword>
<identifier>bouncingDirection</identifier>
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<varDec> 
<keyword>var</keyword> 
<keyword>int</keyword> 
<identifier>newx</identifier> 
<symbol>,</symbol> 
<identifier>newy</identifier> 
<symbol>,</symbol> 
<identifier>divLengthx</identifier> 
<symbol>,</symbol> 
<identifier>divLengthy</identifier> 
<symbol>,</symbol> 
<identifier>factor</identifier> 
<symbol>;</symbol> 
</varDec> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>divLengthx</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>lengthx</identifier> 
</term>
<symbol>/</symbol> 
<term> 
<integerConstant>10</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<letStatement> 
 <keyword>let</keyword> 
<identifier>divLengthy</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<identifier>lengthy</identifier> 
</term>
<symbol>/</symbol> 
<term> 
<integerConstant>10</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>bouncingDirection</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>0</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>factor</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<integerConstant>10</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
<keyword>else</keyword> 
<symbol>{</symbol> 
<statements>
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>~</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>lengthx</identifier> 
</term>
<symbol>&lt;</symbol> 
<term> 
<integerConstant>0</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</term>
</expression> 
<symbol>)</symbol> 
</term>
<symbol>&amp;</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>bouncingDirection</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>1</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
<symbol>|</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>lengthx</identifier> 
</term>
<symbol>&lt;</symbol> 
<term> 
<integerConstant>0</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
<symbol>&amp;</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<identifier>bouncingDirection</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>-</symbol> 
<term> 
<integerConstant>1</integerConstant> 
</term>
</term>
</expression> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>factor</identifier> 
<symbol>=</symbol>
<expression> 
<term> 
<integerConstant>20</integerConstant> 
</term>
</expression> 
<symbol>;</symbol> 
 </letStatement> 
</statements>
<symbol>}</symbol> 
<keyword>else</keyword> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier></identifier> 
<symbol>BAD CODING PRACTICE!all</symbol>
<expression> 
<term> 
<identifier>,</identifier> 
</term>
</expression> 
<symbol>BAD CODING PRACTICE!int</symbol> 
 </letStatement> 
</statements>
<symbol>BAD CODING PRACTICE!AtopWall</symbol> 
 </ifStatement> 
</statements>
<symbol>,</symbol> 
 </ifStatement> 
</statements>
<symbol>BAD CODING PRACTICE!int</symbol> 
</subroutineBody> 
</subroutineDec>
<symbol>}</symbol> 
</class> 

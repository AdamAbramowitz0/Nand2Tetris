// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:



Mux16(a=instruction,b=ALUout,sel=instruction[15],out=toARegister);
Not(in=instruction[15],out=poi);
Or(a=instruction[5],b=poi,out=bnm);
ARegister(in=toARegister,load=bnm,out=AMtoALU,out=toPC,out[0..14]=addressM);

Mux16(a=AMtoALU,b=inM,sel=instruction[12],out=AMtoALUf);

And(a=instruction[4],b=instruction[15],out=loadss);
DRegister(in=ALUout,load=loadss,out=DtoALU);

ALU(y=AMtoALUf,x=DtoALU,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout, out=outM,zr=zero,ng=negative);

Not(in=reset,out=increment);



//If center is zero
And(a=instruction[1],b=zero,out=match);

And(a=instruction[2],b=negative,out=matchOne);
Not(in=negative,out=nNegative);
Not(in=zero,out=nZero);
And(a=nZero,b=nNegative,out=positive);
And(a=instruction[0],b=positive,out=matchTwo);

Mux(a=matchOne,b=true,sel=match, out=checkOne);
Mux(a=matchTwo,b=true,sel=match, out=checkTwo);
Or(a=checkOne,b=checkTwo,out=ics);
And(a=instruction[15],b=ics,out=icq);

PC(in=toPC,load=icq,inc=increment,reset=reset,out[0..14]=pc);


And(a=instruction[3],b=instruction[15],out=writeM);








}
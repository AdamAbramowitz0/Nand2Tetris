<class> 
<keyword> class </keyword> 
<identifier>SquareGame</identifier> 
<Eleven> Name: SquareGame Catagory: class Index: 0 Usage: Declared </Eleven> 
<symbol>{</symbol> 
<classVarDec> 
<keyword>field</keyword>
<identifier>Square</identifier>
<identifier>square</identifier>
<Eleven> Name: square Catagory: field Index: 0 Usage: Declared </Eleven> 
<symbol>;</symbol>
</classVarDec>
<classVarDec> 
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>direction</identifier>
<Eleven> Name: direction Catagory: field Index: 1 Usage: Declared </Eleven> 
<symbol>;</symbol>
</classVarDec>
<subroutineDec> 
<keyword>constructor</keyword>
<identifier>SquareGame</identifier>
<Eleven> Name: SquareGame Catagory: NA1 Index: 0 Usage: Declared </Eleven> 
<identifier>new</identifier>
<Eleven> Name: new Catagory:  Index: YO Usage: Declared </Eleven> 
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>square</identifier> 
<Eleven> Name: square Catagory:  Index: YO Usage: declared TYPE AGH:NONE</Eleven> 
<symbol>=</symbol>
<letStatement> 
 <keyword>let</keyword> 
<identifier>direction</identifier> 
<Eleven> Name: direction Catagory:  Index: YO Usage: declared TYPE AGH:NONE</Eleven> 
<symbol>=</symbol>
<returnStatement> 
 <keyword>return</keyword> 
<expression> 
<term> 
<keyword>this</keyword> 
</term>
</expression> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>void</keyword>
<Eleven> Name: void Catagory: NA1 Index: 0 Usage: Declared </Eleven> 
<identifier>dispose</identifier>
<Eleven> Name: dispose Catagory:  Index: YO Usage: Declared </Eleven> 
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
<doStatement> 
 <keyword>do</keyword> 
<returnStatement> 
 <keyword>return</keyword> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>void</keyword>
<Eleven> Name: void Catagory: NA1 Index: 0 Usage: Declared </Eleven> 
<identifier>moveSquare</identifier>
<Eleven> Name: moveSquare Catagory:  Index: YO Usage: Declared </Eleven> 
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<statements>
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: direction Catagory:  Index: YO Usage: used </Eleven> 
<identifier>direction</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>1</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: direction Catagory:  Index: YO Usage: used </Eleven> 
<identifier>direction</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>2</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: direction Catagory:  Index: YO Usage: used </Eleven> 
<identifier>direction</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>3</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: direction Catagory:  Index: YO Usage: used </Eleven> 
<identifier>direction</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>4</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
</statements>
<symbol>}</symbol> 
</ifStatement> 
<doStatement> 
 <keyword>do</keyword> 
<returnStatement> 
 <keyword>return</keyword> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<subroutineDec> 
<keyword>method</keyword>
<keyword>void</keyword>
<Eleven> Name: void Catagory: NA1 Index: 0 Usage: Declared </Eleven> 
<identifier>run</identifier>
<Eleven> Name: run Catagory:  Index: YO Usage: Declared </Eleven> 
<symbol>(</symbol>
<parameterList> 
</parameterList>
<symbol>)</symbol>
<subroutineBody> 
<symbol> { </symbol> 
<varDec> 
<keyword>var</keyword> 
<keyword>char</keyword> 
<identifier>key</identifier> 
<Eleven> Name: key Catagory: var Index: 0 Usage: Declared </Eleven> 
<symbol>;</symbol> 
</varDec> 
<varDec> 
<keyword>var</keyword> 
<keyword>boolean</keyword> 
<identifier>exit</identifier> 
<Eleven> Name: exit Catagory: var Index: 1 Usage: Declared </Eleven> 
<symbol>;</symbol> 
</varDec> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>exit</identifier> 
<Eleven> Name: exit Catagory: var Index: 1 Usage: declared TYPE AGH:boolean</Eleven> 
<symbol>=</symbol>
<whileStatement> 
 <keyword>while</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>~</symbol> 
<term> 
<Eleven> Name: exit Catagory: var Index: 1 Usage: used </Eleven> 
<identifier>exit</identifier> 
</term>
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<whileStatement> 
 <keyword>while</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: key Catagory: var Index: 0 Usage: used </Eleven> 
<identifier>key</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>0</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>key</identifier> 
<Eleven> Name: key Catagory: var Index: 0 Usage: declared TYPE AGH:char</Eleven> 
<symbol>=</symbol>
<doStatement> 
 <keyword>do</keyword> 
</statements>
<symbol>}</symbol> 
 </whileStatement>
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: key Catagory: var Index: 0 Usage: used </Eleven> 
<identifier>key</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>81</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>exit</identifier> 
<Eleven> Name: exit Catagory: var Index: 1 Usage: declared TYPE AGH:boolean</Eleven> 
<symbol>=</symbol>
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: key Catagory: var Index: 0 Usage: used </Eleven> 
<identifier>key</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>90</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: key Catagory: var Index: 0 Usage: used </Eleven> 
<identifier>key</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>88</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<doStatement> 
 <keyword>do</keyword> 
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: key Catagory: var Index: 0 Usage: used </Eleven> 
<identifier>key</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>131</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>direction</identifier> 
<Eleven> Name: direction Catagory:  Index: YO Usage: declared TYPE AGH:NONE</Eleven> 
<symbol>=</symbol>
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: key Catagory: var Index: 0 Usage: used </Eleven> 
<identifier>key</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>133</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>direction</identifier> 
<Eleven> Name: direction Catagory:  Index: YO Usage: declared TYPE AGH:NONE</Eleven> 
<symbol>=</symbol>
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: key Catagory: var Index: 0 Usage: used </Eleven> 
<identifier>key</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>130</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>direction</identifier> 
<Eleven> Name: direction Catagory:  Index: YO Usage: declared TYPE AGH:NONE</Eleven> 
<symbol>=</symbol>
</statements>
<symbol>}</symbol> 
</ifStatement> 
<ifStatement> 
 <keyword>if</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: key Catagory: var Index: 0 Usage: used </Eleven> 
<identifier>key</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>132</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>direction</identifier> 
<Eleven> Name: direction Catagory:  Index: YO Usage: declared TYPE AGH:NONE</Eleven> 
<symbol>=</symbol>
</statements>
<symbol>}</symbol> 
</ifStatement> 
<whileStatement> 
 <keyword>while</keyword> 
<symbol>(</symbol> 
<expression> 
<term> 
<symbol>~</symbol> 
<term> 
<symbol>(</symbol> 
<expression> 
<term> 
<Eleven> Name: key Catagory: var Index: 0 Usage: used </Eleven> 
<identifier>key</identifier> 
</term>
<symbol>=</symbol> 
<term> 
<integerConstant>0</integerConstant> 
</term>
</expression> 
<symbol>)</symbol> 
</term>
</term>
</expression> 
<symbol>)</symbol> 
<symbol>{</symbol> 
<statements>
<letStatement> 
 <keyword>let</keyword> 
<identifier>key</identifier> 
<Eleven> Name: key Catagory: var Index: 0 Usage: declared TYPE AGH:char</Eleven> 
<symbol>=</symbol>
<doStatement> 
 <keyword>do</keyword> 
</statements>
<symbol>}</symbol> 
 </whileStatement>
</statements>
<symbol>}</symbol> 
 </whileStatement>
<returnStatement> 
 <keyword>return</keyword> 
<symbol>;</symbol> 
 </returnStatement> 
</statements>
<symbol>}</symbol> 
</subroutineBody> 
</subroutineDec>
<symbol>}</symbol> 
</class> 
